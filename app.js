// Generated by CoffeeScript 1.4.0
var CALLBACK_URL, Couch, DB_DATABASE, DB_DESIGN, DB_URL, DOCTAPE_APP_KEY, DOCTAPE_APP_SECRET, Doctape, DoctapeStrategy, all, app, db, ensureAuthenticated, express, getAllGalleryData, getGalleries, http, member, passport, path, request, server;

express = require('express');

http = require('http');

path = require('path');

request = require('request');

passport = require('passport');

Couch = require('node-couch');

Doctape = require('doctape');

DoctapeStrategy = require('passport-doctape').Strategy;

DOCTAPE_APP_KEY = 'your-doctape-app-key';

DOCTAPE_APP_SECRET = 'your-doctape-app-secret';

CALLBACK_URL = 'http://app.url/auth/doctape/callback';

DB_URL = 'http://couch:5984';

DB_DATABASE = 'dtgallery';

DB_DESIGN = 'couch';

member = function(arr, val) {
  var v, _i, _len;
  val = val.replace(/\s/g, "*#*");
  for (_i = 0, _len = arr.length; _i < _len; _i++) {
    v = arr[_i];
    v = v.replace(/\s/g, "*#*");
    if (v === val) {
      return true;
    }
  }
  return false;
};

all = function(arr, inArray) {
  var a, _i, _len;
  for (_i = 0, _len = arr.length; _i < _len; _i++) {
    a = arr[_i];
    if (!member(inArray, a)) {
      return false;
    }
  }
  return true;
};

ensureAuthenticated = function(req, res, next) {
  if (req.isAuthenticated()) {
    return next();
  } else {
    return res.redirect('/login');
  }
};

passport.serializeUser(function(user, done) {
  return done(null, user);
});

passport.deserializeUser(function(obj, done) {
  return done(null, obj);
});

passport.use(new DoctapeStrategy({
  authorizationURL: 'https://api.doctape.com/oauth2',
  tokenURL: 'https://api.doctape.com/oauth2/token',
  clientID: DOCTAPE_APP_KEY,
  clientSecret: DOCTAPE_APP_SECRET,
  callbackURL: CALLBACK_URL
}, function(accessToken, refreshToken, profile, done) {
  profile.accessToken = accessToken;
  return done(null, profile);
}));

db = new Couch(DB_URL, DB_DATABASE, DB_DESIGN);

getGalleries = function(username, cb) {
  return db.view({
    key: username,
    view: 'galleries_by_username'
  }, function(err, data) {
    if (data[0].id != null) {
      return cb(null, data[0].value);
    } else {
      return cb(null, {});
    }
  });
};

app = express();

app.configure(function() {
  app.set('port', process.env.PORT || 4000);
  app.set('views', __dirname + '/views');
  app.set('view engine', 'jade');
  app.use(express.logger('dev'));
  app.use(express.cookieParser());
  app.use(express.bodyParser());
  app.use(express.methodOverride());
  app.use(express["static"](path.join(__dirname, 'public')));
  app.use(express.session({
    secret: '39f8d5313141b1f2bade311ba571537e'
  }));
  app.use(passport.initialize());
  app.use(passport.session());
  return app.configure('development', function() {
    return app.use(express.errorHandler());
  });
});

getAllGalleryData = function(user, cb) {
  return request.get({
    url: 'https://api.doctape.com/v1/doc',
    headers: {
      'Authorization': 'Bearer ' + user.accessToken
    }
  }, function(err, reqres, body) {
    if (!err) {
      return getGalleries(user.username, function(err, galleries) {
        var doc, docs, galdocs, gallery, galname, galobj, galtags, id, _i, _len;
        galdocs = [];
        for (_i = 0, _len = galleries.length; _i < _len; _i++) {
          gallery = galleries[_i];
          galname = gallery.name;
          galtags = gallery.tags;
          galobj = {};
          docs = JSON.parse(body).result;
          for (id in docs) {
            doc = docs[id];
            if (all(galtags, doc.tags)) {
              if (doc.media_type === 'image') {
                galobj[doc.id] = doc;
              }
            }
          }
          galobj._data = {
            name: galname,
            tags: galtags
          };
          galdocs.push(galobj);
        }
        return cb(galdocs, galleries);
      });
    }
  });
};

app.get('/', function(req, res) {
  if (req.isAuthenticated()) {
    return getAllGalleryData(req.user, function(galdocs, galleries) {
      var frontImgID, gal, length, newGalDocs, newGalObj, ran, _i, _len;
      newGalDocs = [];
      for (_i = 0, _len = galdocs.length; _i < _len; _i++) {
        gal = galdocs[_i];
        newGalObj = {};
        length = Object.keys(gal).length;
        newGalObj['length'] = length - 1;
        ran = Math.floor(Math.random() * length - 1);
        frontImgID = Object.keys(gal)[ran];
        newGalObj['frontImgID'] = frontImgID;
        newGalObj['name'] = gal._data.name;
        newGalObj['tags'] = gal._data.tags;
        newGalDocs.push(newGalObj);
      }
      return res.render('index', {
        page: 'home',
        auth: true,
        galleries: galleries,
        username: req.user.username,
        galdocs: newGalDocs
      });
    });
  } else {
    return res.render('index', {
      auth: false,
      page: 'home'
    });
  }
});

app.get('/account', ensureAuthenticated, function(req, res) {
  return request.get({
    url: 'https://api.doctape.com/v1/account',
    headers: {
      'Authorization': 'Bearer ' + req.user.accessToken
    }
  }, function(err, reqres, body) {
    var data;
    if (!err) {
      data = JSON.parse(body);
      return getGalleries(data.result.username, function(err, galleries) {
        if (!err) {
          return res.render('account', {
            auth: true,
            username: data.result.username,
            freespace: Math.round(data.result.quota_free / 1000000000 * 100) / 100,
            galleries: galleries,
            page: 'account'
          });
        }
      });
    } else {
      return console.log(err);
    }
  });
});

app.get('/gallery/:id', ensureAuthenticated, function(req, res) {
  return getAllGalleryData(req.user, function(galdocs, galleries) {
    var galid;
    galid = req.params.id - 1;
    return res.render('gallery', {
      auth: true,
      galleries: galleries,
      username: req.user.username,
      galdocs: galdocs[galid],
      page: 'gallery'
    });
  });
});

app.get('/thumb/:id', ensureAuthenticated, function(req, res) {
  var pic;
  pic = request({
    method: 'GET',
    url: 'https://api.doctape.com/v1/doc/' + req.params.id + '/thumb_320.jpg',
    headers: {
      'Authorization': 'Bearer ' + req.user.accessToken
    }
  });
  return pic.pipe(res);
});

app.get('/image/:id', ensureAuthenticated, function(req, res) {
  var pic;
  pic = request({
    method: 'GET',
    url: 'https://api.doctape.com/v1/doc/' + req.params.id + '/original',
    headers: {
      'Authorization': 'Bearer ' + req.user.accessToken
    }
  });
  return pic.pipe(res);
});

app.get('/login', function(req, res) {
  return res.render('login', {
    auth: false
  });
});

app.post('/creategallery', function(req, res) {
  if (req.isAuthenticated()) {
    return db.doc(req.user.username, function(err, data) {
      var doc;
      if (data._id != null) {
        doc = data;
        doc.galleries.push(req.body);
        console.log(doc);
      } else {
        doc = {
          _id: req.user.username,
          galleries: req.body
        };
      }
      return db.saveDoc(doc, function(err, data) {
        if (!err) {
          return res.send('OK');
        }
      });
    });
  } else {
    return res.send('error: not authenticated!');
  }
});

app.get('/deletegallery/:id', function(req, res) {
  if (req.isAuthenticated()) {
    return db.doc(req.user.username, function(err, data) {
      var doc, galleries;
      if (!err) {
        doc = data;
        galleries = data.galleries;
        galleries.splice(req.params.id - 1, 1);
        doc.galleries = galleries;
        return db.saveDoc(doc, function(er, dat) {
          if (!er) {
            return res.send('OK');
          }
        });
      }
    });
  } else {
    return res.send('error: not authenticated!');
  }
});

app.get('/auth/doctape', passport.authenticate('doctape', {
  scope: ['account', 'docs']
}), function(req, res, next) {});

app.get('/auth/doctape/callback', passport.authenticate('doctape', {
  failureRedirect: '/login'
}), function(req, res, next) {
  return res.redirect('/');
});

app.get('/logout', ensureAuthenticated, function(req, res) {
  req.session.destroy();
  return res.redirect('/');
});

server = http.createServer(app);

server.listen(app.get('port'), function() {
  return console.log('Express server listening on port ' + app.get('port'));
});
